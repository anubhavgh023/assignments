/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
import express, { json } from 'express';
import { writeFile, readFile } from 'node:fs/promises';
const port = 3000;

const app = express();

app.use(json());


//function to read file from todos.json
async function readTodoFile(filePath) {
    try {
        let fileData = await readFile(filePath, "utf-8");
        return JSON.parse(fileData);

    } catch (error) {
        console.error(error);
        throw error;
    }
}

//function to write data to todos.json
async function writeTodoFile(filePath, data) {
    try {
        await writeFile(filePath, data, 'utf-8');

    } catch (error) {
        console.error(error);
        throw err;
    }
}

//check if todo is present
async function isTodoPresent(id) {
    let todos = await readTodoFile("todos.json");
    const isPresent = todos.find((todo) => todo.id === id);
    return isPresent;
}

//file acting as a database
const filePath = "todos.json";

app.get("/todos", async (req, res) => {
    try {
        let todos = await readTodoFile(filePath);
        res.json({
            todos
        })
    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: "Internal Server Error"
        })
    }
})


app.get("/todos/:id", async (req, res) => {
    const getId = Number(req.params.id);
    const result = await isTodoPresent(getId);
    if (result) {
        res.json({
            result
        })
    } else {
        res.status(404).json({
            msg: "id not found."
        })
    }
})

app.post("/todos", async (req, res) => {
    const newTodo = req.body;
    let todos = await readTodoFile(filePath);
    console.log('before', todos);
    try {
        if (!isTodoPresent(newTodo.id)) {
            todos.push(newTodo);
            console.log(todos);
            await writeTodoFile(filePath, JSON.stringify(todos));
            res.send(201).json({
                todos
            });
        } else {
            res.status(404).json({
                msg: `todo is already present with id:${newTodo.id},set a unique id.`
            })
        }

    } catch (error) {
        console.error(error);
        res.status(500).json({
            error: "Internal Server Error"
        })
        throw error;
    }

})

app.put("/todos/:id", (req, res) => {
    const updateId = Number(req.params.id);
    if (isTodoPresent(updateId)) {
        let index = todos.findIndex((todo) => todo.id === updateId);
        todos[index] = req.body;
        res.json({
            msg: `updated todo of id: ${updateId}`
        })
    } else {
        res.status(404).json({
            msg: `no todo found with id:${updateId}`
        })
    }
})

app.delete("/todos/:id", (req, res) => {
    const deleteId = Number(req.params.id);
    if (isTodoPresent(deleteId)) {
        let index = todos.findIndex((todo) => todo.id === deleteId);
        todos.splice(index, 1);
        res.json({
            msg: `deleted todo of id: ${deleteId}`
        })
    } else {
        res.status(404).json({
            msg: `no todo found with id:${deleteId}`
        })
    }

})

// Handle invalid routes (404)
app.use((req, res) => {
    res.status(404).json({ error: 'Not Found' });
});

app.listen(port, () => {
    console.log(`Listening on port: ${port}`);
})

export default app;